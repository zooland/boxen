# Inspired by https://github.com/matthewmccullough/dotfiles

[user]
    name = Kevin Loveland
    email = kevin.loveland@gmail.com

[color]
# ui = true is a superset of all the more specific color options
#  as documented at http://book.git-scm.com/5_customizing_git.html
# When set to always, always use colors in all git commands which are capable of colored output.
# When false, never. When set to true or auto, use colors only when the output is to the terminal.
# When more specific variables of color.* are set, they always take precedence over this setting.
# Defaults to false.
    ui = auto
    # diff = auto
    # status = auto
    # branch = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[gui]
    fontdiff = -family Monaco -size 10 -weight normal -slant roman -underline 0 -overstrike 0

[core]
    excludesfile = /opt/boxen/config/git/gitignore
    quotepath = false
    autocrlf = input
    safecrlf = warn
    editor = subl -w

[alias]
    stat = status -s
    ci = commit
    # br = branch -a
    # s = status -s -u
    # cl = log --stat -C -2
    # c = commit
    co = checkout
    # d = diff --color-words
    # dh = diff HEAD
    # dc = diff --staged
    # dw = diff --word-diff
    # dcw = diff --color-words
    # dm = !git diff | mate
    # dv = !git diff | vim
    # who = shortlog -s --
    # ph = push
    # pl = pull
    # lp = log -p
    # lod = log --oneline --decorate
    # lg = log --graph
    # lpo = log --pretty=oneline --abbrev-commit --graph --decorate --all
    # l1 = log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
    # l2 = log --graph --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    # sync = !git pull && git push
    # es = !git pull --rebase && git push
    # lf = log --pretty=fuller
    # ignorechanges = update-index --assume-unchanged
    # noticechanges = update-index --no-assume-unchanged
    # gc-ap = gc --aggressive --prune
    # listconf = config --global --list
    # cam = commit -a -m
    # lsm = log -M --stat
    # hse = log --stat -5
    # diffall = diff HEAD
    # logr = log -M
    # logr2 = log --stat -M -2
    # logit = log --stat -M
    # scrub = !git reset --hard && git clean -fd
    # pub = !git pub checkout master && git pull && git checkout dev && git rebase master && git checkout master && git merge dev && git wtf
    # cs = status
    # rv = remote -v
    # lwr = log --stat -C
    # pur = pull --rebase
    # whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
    # orphank = !gitk --all `git reflog | cut -c1-7`&
    # orphanl = !git log --pretty=oneline --abbrev-commit --graph --decorate `git reflog | cut -c1-7`
    # k = !exec gitk --all&
    # testecho1 = !sh -c 'echo with slash: zero=$0 one=$1 two=$2' -
    # # te1 RESULT: with slash: zero=- one=A two=B
    # testecho2 = !sh -c 'echo without slash: zero=$0 one=$1 two=$2'
    # # te2 RESULT: without slash: zero=A one=B two=C
    # st = status
    # l = log --stat -C
    # ll = log --stat -C -3
    # servehere = daemon --verbose --informative-errors --reuseaddr --export-all --base-path=. --enable=receive-pack
    purgeme = !git clean -fd && git reset --hard
    prunenow = gc --prune=now
    # ri = rebase --interactive --autosquash
    # lol = log --pretty=oneline --graph --abbrev-commit --all
    # blg = log --graph --decorate --all --abbrev-commit --pretty=oneline
    # slog = log --graph --simplify-by-decoration --all --abbrev-commit --pretty=oneline
    # lgso = log --graph --date=short --pretty=format:'%C(yellow)%h%Creset %cn%x09%cd %s%C(green bold)%d'
    # ro = !git fetch origin && git reset --hard origin/master
    # shorten = "!sh -c 'curl -i http://git.io -F url=$1' -"
    # pushnotes = !sh -c 'git push $1 refs/notes/*' -
    # fetchnotes = !sh -c 'git fetch $1 refs/notes/*:refs/notes/*' -
    # showignored = clean -ndX
    # showignored2 = ls-files --others --ignored --exclude-standard
    # showuntracked = ls-files --others --exclude-standard
    # rmmissing = !git rm $(git ls-files --deleted)
    # mergekeepoursonly = merge -s ours
    # redocommit = reset --soft HEAD^
    # listunstaged = diff --name-status
    # liststaged = diff --name-status --staged
    # listhistory = log --name-status
    # logn = log --oneline --name-only
    # busypeople = shortlog -6
    # busythisweek = shortlog --since=one.week.ago
    # configpushtracking = config push.default tracking
    # configpushnothing = config push.default nothing
    # configpushtracking = config push.default matching
    # configpushcurrent = config push.default current
    showold = !sh -c 'for k in `git branch -r|awk "{print $1}"`;do echo `git show --pretty=format:"%Cgreen%ci %Cblue%cr %Cred%cn %Creset" $k|head -n 1`\\t$k;done|sort â€“r'

    # Other alias ideas that don't quite work yet
    #testnewrepodoesntwork1 = !echo git init $1 && echo cd $1
    #testnewrepodoesntwork2 = !sh -c 'git init $1; echo hi' -
    #testnewrepodoesntwork3 = "!f() { git init $1}; f"
    # nr = "!sh -c 'git init $0'"
    # echoparam1 = "!sh -c 'echo $0'"
    #testshfunction = "!function gitme() { git init $1; cd $1; }; gitme"
    
    # fixup = "!sh -c 'git commit -m \"fixup! $(git log -1 --format='\\''%s'\\'' $@)\"' -"
    # squash = "!sh -c 'git commit -m \"squash! $(git log -1 --format='\\''%s'\\'' $@)\"' -"
    # ccfq = "!sh -c 'git add $1 && git commit -m\"Placeholder\"' -"
    # logme = log --author=Jim --stat -C
    # cob = checkout -b
    # sno = show --name-only
    # logsimple = log --graph --abbrev-commit --pretty=oneline --all --decorate


[apply]
    whitespace = nowarn
[rerere]
    enabled = false

[difftool "kdiff3"]
    path = /usr/local/bin/kdiff3
    trustExitCode = false
[difftool]
    prompt = false
[mergetool "kdiff3"]
    path = /usr/local/bin/kdiff3
    trustExitCode = false
    p41merge = /Applications/p4merge.app/Contents/Resources/launchp4merge "$LOCAL" "$REMOTE"
    tool = p41merge
[mergetool]
    prompt = false
    keepBackup = false
    keepTemporaries = false
[merge]
    tool = p41merge

[difftool "sourcetree"]
    cmd = opendiff \"$LOCAL\" \"$REMOTE\"
    path = 

[mergetool "sourcetree"]
    cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
    trustExitCode = true

[mergetool "p41merge"]
    cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge "$PWD/$BASE" "$PWD/$REMOTE" "$PWD/$LOCAL" "$PWD/$MERGED"
    keepTemporaries = false
    trustExitCode = false
    keepBackup = false

[github]
    user = jdigger
    token = https://github.com/blog/1090-github-api-moving-on

[credential]
    helper = /opt/boxen/bin/boxen-git-credential

[push]
    default = simple

[merge "tool"]
    prompt = false

[man]
    viewer = gem-man

[man "gem-man"]
    cmd = gem man -s

[hub]
protocol = https
